import com.typesafe.tools.mima.core._

object MimaExclusions {

  val list = List(
    ProblemFilters.exclude[MissingClassProblem]("munit.EmptyPrinter"),
    ProblemFilters.exclude[MissingClassProblem]("munit.EmptyPrinter$"),
    ProblemFilters.exclude[MissingClassProblem]("munit.Printer"),
    ProblemFilters.exclude[MissingClassProblem](
      "munit.internal.console.AnsiColors"
    ),
    ProblemFilters.exclude[MissingClassProblem](
      "munit.internal.console.AnsiColors$"
    ),
    ProblemFilters.exclude[IncompatibleResultTypeProblem](
      "munit.internal.console.Printers.print$default$2"
    ),
    ProblemFilters.exclude[IncompatibleMethTypeProblem](
      "munit.internal.console.Printers.print"
    ),
    ProblemFilters.exclude[IncompatibleResultTypeProblem](
      "munit.internal.console.Printers.log$default$2"
    ),
    ProblemFilters.exclude[IncompatibleMethTypeProblem](
      "munit.internal.console.Printers.log"
    ),
    ProblemFilters.exclude[IncompatibleMethTypeProblem](
      "munit.internal.console.Printers.log"
    ),
    ProblemFilters.exclude[IncompatibleResultTypeProblem](
      "munit.internal.console.Printers.log$default$2"
    ),
    ProblemFilters.exclude[IncompatibleMethTypeProblem](
      "munit.internal.console.Printers.print"
    ),
    ProblemFilters.exclude[IncompatibleResultTypeProblem](
      "munit.internal.console.Printers.print$default$2"
    ),
    ProblemFilters.exclude[MissingClassProblem](
      "munit.internal.difflib.ChangeDelta"
    ),
    ProblemFilters.exclude[MissingClassProblem]("munit.internal.difflib.Chunk"),
    ProblemFilters.exclude[MissingClassProblem](
      "munit.internal.difflib.DeleteDelta"
    ),
    ProblemFilters.exclude[MissingClassProblem]("munit.internal.difflib.Delta"),
    ProblemFilters.exclude[MissingClassProblem](
      "munit.internal.difflib.Delta$TYPE"
    ),
    ProblemFilters.exclude[MissingClassProblem](
      "munit.internal.difflib.Delta$TYPE$"
    ),
    ProblemFilters.exclude[MissingClassProblem](
      "munit.internal.difflib.Delta$TYPE$CHANGE$"
    ),
    ProblemFilters.exclude[MissingClassProblem](
      "munit.internal.difflib.Delta$TYPE$DELETE$"
    ),
    ProblemFilters.exclude[MissingClassProblem](
      "munit.internal.difflib.Delta$TYPE$INSERT$"
    ),
    ProblemFilters.exclude[MissingClassProblem]("munit.internal.difflib.Diff"),
    ProblemFilters.exclude[MissingClassProblem](
      "munit.internal.difflib.DiffAlgorithm"
    ),
    ProblemFilters.exclude[MissingClassProblem](
      "munit.internal.difflib.DiffNode"
    ),
    ProblemFilters.exclude[MissingClassProblem](
      "munit.internal.difflib.DiffUtils"
    ),
    ProblemFilters.exclude[MissingClassProblem](
      "munit.internal.difflib.DiffUtils$"
    ),
    ProblemFilters.exclude[MissingClassProblem](
      "munit.internal.difflib.DifferentiationFailedException"
    ),
    ProblemFilters.exclude[MissingClassProblem]("munit.internal.difflib.Diffs"),
    ProblemFilters.exclude[MissingClassProblem](
      "munit.internal.difflib.Diffs$"
    ),
    ProblemFilters.exclude[MissingClassProblem](
      "munit.internal.difflib.Equalizer"
    ),
    ProblemFilters.exclude[MissingClassProblem](
      "munit.internal.difflib.Equalizer$"
    ),
    ProblemFilters.exclude[MissingClassProblem](
      "munit.internal.difflib.InsertDelta"
    ),
    ProblemFilters.exclude[MissingClassProblem](
      "munit.internal.difflib.MyersDiff"
    ),
    ProblemFilters.exclude[MissingClassProblem]("munit.internal.difflib.Patch"),
    ProblemFilters.exclude[MissingClassProblem](
      "munit.internal.difflib.PathNode"
    ),
    ProblemFilters.exclude[MissingClassProblem]("munit.internal.difflib.Snake"),
    ProblemFilters.exclude[DirectMissingMethodProblem](
      "munit.MUnitRunner.descriptions"
    ),
    ProblemFilters.exclude[DirectMissingMethodProblem](
      "munit.MUnitRunner.testNames"
    ),
    ProblemFilters.exclude[DirectMissingMethodProblem](
      "munit.MUnitRunner.munitTests"
    ),
    ProblemFilters.exclude[DirectMissingMethodProblem](
      "munit.ValueTransforms.munitTimeout"
    ),
    ProblemFilters.exclude[MissingTypesProblem]("munit.FailException"),
    ProblemFilters.exclude[MissingTypesProblem]("munit.FailSuiteException"),
    ProblemFilters.exclude[MissingTypesProblem](
      "munit.TestValues$FlakyFailure"
    ),
    ProblemFilters.exclude[DirectMissingMethodProblem](
      "munit.internal.junitinterface.JUnitComputer.this"
    ),
    // Known breaking changes for MUnit v1
    ProblemFilters.exclude[DirectMissingMethodProblem](
      "munit.Assertions.assertNotEquals"
    ),
    ProblemFilters.exclude[DirectMissingMethodProblem](
      "munit.Assertions.assertEquals"
    ),
    ProblemFilters.exclude[IncompatibleMethTypeProblem](
      "munit.Assertions.assertNotEquals"
    ),
    ProblemFilters.exclude[IncompatibleMethTypeProblem](
      "munit.Assertions.assertEquals"
    ),
    ProblemFilters.exclude[IncompatibleMethTypeProblem](
      "munit.FunSuite.assertNotEquals"
    ),
    ProblemFilters.exclude[IncompatibleMethTypeProblem](
      "munit.FunSuite.assertEquals"
    ),
    ProblemFilters.exclude[IncompatibleMethTypeProblem](
      "munit.FunSuite.munitTestTransform"
    ),
    ProblemFilters.exclude[MissingClassProblem]("munit.GenericAfterEach"),
    ProblemFilters.exclude[MissingClassProblem]("munit.GenericBeforeEach"),
    ProblemFilters.exclude[MissingClassProblem]("munit.GenericTest"),
    ProblemFilters.exclude[DirectMissingMethodProblem](
      "munit.MUnitRunner.createTestDescription"
    ),
    ProblemFilters.exclude[IncompatibleMethTypeProblem](
      "munit.Suite.beforeEach"
    ),
    ProblemFilters.exclude[IncompatibleMethTypeProblem](
      "munit.Suite.afterEach"
    ),
    ProblemFilters.exclude[MissingClassProblem]("munit.Suite$Fixture"),
    ProblemFilters.exclude[IncompatibleMethTypeProblem](
      "munit.TestTransforms#TestTransform.apply"
    ),
    ProblemFilters.exclude[IncompatibleMethTypeProblem](
      "munit.FunFixtures#FunFixture.this"
    ),
    ProblemFilters.exclude[IncompatibleMethTypeProblem](
      "munit.SuiteTransforms#SuiteTransform.this"
    ),
    ProblemFilters.exclude[IncompatibleMethTypeProblem](
      "munit.TestTransforms#TestTransform.this"
    ),
    ProblemFilters.exclude[IncompatibleMethTypeProblem](
      "munit.ValueTransforms#ValueTransform.this"
    ),
    ProblemFilters.exclude[DirectMissingMethodProblem](
      "munit.ScalaCheckSuite.unitToProp"
    )
  )
}
